#!/usr/bin/perl

use strict;
use warnings;
use feature 'say';

use Term::ReadLine ();
use File::Temp ();

my @includes = qw(<stdio.h>);

my (undef, $program) = File::Temp::tempfile("creplXXXXXX", TMPDIR => 1);
my $source_file = "$program.c";
if ($^O eq 'cygwin') {
    $program .= '.exe';
}
my $use_math_lib = 0;

my $term = new Term::ReadLine 'crepl';
$term->ornaments(0);
while (defined (my $line = $term->readline('{} '))) {
    if ($line =~ /^\s*(h|help|\?)\s*$/) {
        help();
    }
    elsif ($line =~ /^\s*include\s*$/) {
        show_includes();
    }
    elsif ($line =~ /^\s*include\b\s*(.*)$/) {
        add_include($1);
    }
    else {
        my @files = ();
        my $print_source = 0;
        if ($line =~ /^\s*p\b\s*(.*)$/) {
            $print_source = 1;
            $line = $1;
        }
        if ($line =~ /^\s*([df])\b\s*(.*)$/) {
            my($format, $expr) = ($1, $2);
            $line = qq{printf("%$format\\n", $expr)};
        }
        create_source($source_file, $line, $print_source);
        push @files, $source_file;
        my @lm = $use_math_lib ? qw(-lm) : ();
        my $result = system qw(gcc -std=c11 -pedantic-errors), $source_file, '-o', $program, @lm;
        if ($result == 0) {
            push @files, $program;
            system $program;
        }
        else {
            say "Compilation failed";
        }
        unlink @files if @files;
    }
}

########################################################################

# Returns a (possibly multi-line) string containing #include directives.
# The string is terminated by a newline.
sub includes {
    my $result = '';
    foreach my $include (@includes) {
       $result .=  "#include $include\n";
    }
    return $result;
}

# Returns the head of the generated C source file
sub head {
    return includes() . "int main(void) {\n";
}

# Returns the tail of the generated C source file
sub tail {
    return "    ;\n}\n";
}

sub show_includes {
    print includes();
}

sub add_include {
    my($include) = @_;
    if ($include !~ /^<.*>$/ and $include !~ /^".*"$/) {
        $include = "<$include>";
    }
    if ($include eq '<math.h>' or $include eq '<tgmath.h>') {
        $use_math_lib = 1;
    }
    push @includes, $include;
}

sub create_source {
    my($source_file, $line, $print_source) = @_;
    open my $SOURCE, '>', $source_file;
    print $SOURCE head(), "    $line\n", tail();
    if ($print_source) {
        print head(), "    $line\n", tail();
    }
    close $SOURCE;

    # say ">>> $source_file :";
    # system 'cat', $source_file;
    # say ">>> __END__";
}

sub help {
    print <<"EOF";
Enter a C statement
Other commands:
include        List current include list
include HEADER Add a header to the include list
p statement    Print the source file before compiling it
d expr         Print expr with "%d\\n"
f expr         Print expr with "%f\\n"
EOF
}
